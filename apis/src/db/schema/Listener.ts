// This file is generated by Sim IDX. Do not edit manually.
import { pgEnum, pgTable as table } from "drizzle-orm/pg-core";
import * as t from "drizzle-orm/pg-core";
import { db, types } from "@duneanalytics/sim-idx";

export const filledRelay = table("filled_relay", {
  inputToken: t.text('input_token'),
  outputToken: t.text('output_token'),
  inputAmount: db.uint256('input_amount'),
  outputAmount: db.uint256('output_amount'),
  inputDecimals: db.uint8('input_decimals'),
  outputDecimals: db.uint8('output_decimals'),
  repaymentChainId: db.uint256('repayment_chain_id'),
  originChainId: db.uint256('origin_chain_id'),
  depositId: db.uint256('deposit_id'),
  fillDeadline: db.uint32('fill_deadline'),
  exclusivityDeadline: db.uint32('exclusivity_deadline'),
  exclusiveRelayer: db.address('exclusive_relayer'),
  relayer: db.address('relayer'),
  depositor: db.address('depositor'),
  recipient: db.address('recipient'),
  messageHash: db.bytes32('message_hash'),
  updatedRecipient: db.address('updated_recipient'),
  updatedMessageHash: db.bytes32('updated_message_hash'),
  updatedOutputAmount: db.uint256('updated_output_amount'),
  fillType: db.uint8('fill_type'),
  destinationTxHash: db.bytes32('destination_tx_hash'),
  destinationBlockTime: db.uint256('destination_block_time'),
  destinationChainId: db.uint256('destination_chain_id'),
  inputTokenAddress: db.address('input_token_address'),
  outputTokenAddress: db.address('output_token_address'),
})

export const fundsDeposited = table("funds_deposited", {
  inputToken: t.text('input_token'),
  outputToken: t.text('output_token'),
  inputAmount: db.uint256('input_amount'),
  outputAmount: db.uint256('output_amount'),
  inputDecimals: db.uint8('input_decimals'),
  outputDecimals: db.uint8('output_decimals'),
  destinationChainId: db.uint256('destination_chain_id'),
  depositId: db.uint256('deposit_id'),
  quoteTimestamp: db.uint256('quote_timestamp'),
  fillDeadline: db.uint256('fill_deadline'),
  exclusivityDeadline: db.uint256('exclusivity_deadline'),
  depositor: db.address('depositor'),
  recipient: db.address('recipient'),
  exclusiveRelayer: db.address('exclusive_relayer'),
  message: db.bytes('message'),
  originTxHash: db.bytes32('origin_tx_hash'),
  originBlockTime: db.uint256('origin_block_time'),
  originChainId: db.uint256('origin_chain_id'),
  inputTokenAddress: db.address('input_token_address'),
  outputTokenAddress: db.address('output_token_address'),
})
